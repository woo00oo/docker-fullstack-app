language: generic

sudo: required

# 앱을 도커 환경에서 실행하고 있으니 Tarvis Ci에게 도커 환경으로 만들것이라고 선언.
services:
  - docker


# Test를 수행하기 위한 준비
# 구성된 도커 환경에서 Dockerfile.dev를 이용해서 도커 이미지 생성.
before_install:
  - docker build -t woo00oo/react-test-app -f ./frontend/Dockerfile.dev ./frontend

# Test를 수행하기
# 생성된 테스트 이미지를 이용해서 테스트 수행.
script:
  - docker run -e CI=true woo00oo/react-test-app npm run test

# 모든 프로젝트의 운영버전 이미지 빌드
# 테스트가 성공했다면 하나하나의 프로젝트의 운영버전 이미지를 빌드.
after_success:
  - docker build -t woo00oo/docker-frontend ./frontend
  - docker build -t woo00oo/docker-backend ./backend
  - docker build -t woo00oo/docker-nginx ./nginx

  # 빌드된 이미지를 도커 허브에 보내주기
  # 도커 허브에 빌드 된 파일을 넣어주기 위해 도커 허브에 로그인
  - echo "$DOCKER_HUB_PASSWORD" | docker login -u "$DOCKER_HUB_ID" --password-stdin

  # 빌드된 이미즈를 도커허브에 보내주기
  - docker push woo00oo/docker-frontend
  - docker push woo00oo/docker-backend
  - docker push woo00oo/docker-nginx

deploy:
  provider: elasticbeanstalk #외부 서비스 표시(s3, elasticbeanstalk, firebase)
  region: "ap-northeast-2" #현재 사용하고 있는 AWS의 서비스가 위치하고 있는 물리적 장소
  app: "docker-fullstack-app" # 생성된 어플리케이션의 이름
  env: "Dockerfullstackapp-env" 
  bucket_name: elasticbeanstalk-ap-northeast-2-555236258445 # 해당 elasticbeanstalk을 위한 s3 버켓 이름
  bucket_path: "docker-fullstack-app" #어플리케이션의 이름과 동일
  on:
    branch: master  #어떤 브랜치에 Push를 할때 AWS에 배포할 것인지.
  
  access_key_id: $AWS_ACCESS_KEY
  secret_access_key: $AWS_SECRET_ACCESS_KEY